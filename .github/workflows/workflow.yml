name: ipysensitivityprofiler-ci
run-name: ${{ github.actor }}-ipysensitivityprofiler-ci

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages/Release
permissions:
  contents: write  # IMPORTANT: mandatory for making GitHub Releases
  pages: write  
  id-token: write
  
on: 
  push:
    branches: 
      - '*'
    tags:        
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest 
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
      - name: Linting
        shell: bash -el {0}
        run: | 
          pixi run lint 
      - name: Run unit tests
        shell: bash -el {0}
        run: | 
          pixi run test-py 
      - name: Run example notebooks
        shell: bash -el {0}
        run: | 
          pixi run test-nb 
      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-py${{ matrix.python-version }}
          path: ./build
          overwrite: true
  build:  
    needs: test
    runs-on: ubuntu-latest 
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
      - name: 💾 Distribution
        shell: bash -el {0}
        run: | 
          pixi run build-dist
      - name: 📚 Documentation  
        shell: bash -el {0}
        run: | 
          pixi run build-docs
      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build
          overwrite: true
  deploy:  
    needs: build 
    runs-on: ubuntu-latest
    # only release on tag pushes 
    if: startsWith(github.ref, 'refs/tags/v')  
    steps: 
      - name: ⬇️ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build
      - name: Stage distribution for test release 
        # GitHub Actions needs dist/ to be at root level
        shell: bash -el {0}
        run: | 
          mv ./build/dist .
      - name: 📦 Ship package to TestPyPI
        id: testpypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TESTPYPI_TOKEN }}
      - name: ⬆️ Upload documentation to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './build/docs/html'
      - name: 📰 Publish Docs to GitHub Pages
        id: pypi
        uses: actions/deploy-pages@v4
      - name: 📦 Ship package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true
          repository-url: https://upload.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
      # - name: Sign the dists with Sigstore
      #   uses: sigstore/gh-action-sigstore-python@v2.1.1
      #   with:
      #     inputs: >-
      #       ./dist/*.tar.gz
      #       ./dist/*.whl
      # - name: Create GitHub Release
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   run: >-
      #     gh release create
      #     '${{ github.ref_name }}'
      #     --repo '${{ github.repository }}'
      #     --notes ""
      # - name: Upload artifact signatures to GitHub Release
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   # Upload to GitHub Release using the `gh` CLI.
      #   # `dist/` contains the built packages, and the
      #   # sigstore-produced signatures and certificates.
      #   run: >-
      #     gh release upload
      #     '${{ github.ref_name }}' dist/**
      #     --repo '${{ github.repository }}'
  
